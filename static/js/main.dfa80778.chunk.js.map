{"version":3,"sources":["reducers/gallery.js","reducers/notification.js","reducers/index.js","store.js","actions/index.js","components/app-header/index.js","components/app-header/app-header.js","components/gallery/gallery.js","components/gallery/index.js","components/add-form/add-form.js","components/add-form/index.js","components/notification/index.js","components/notification/notification.js","components/preview/preview.js","components/preview/index.js","components/preloader/index.js","components/preloader/preloader.js","components/modal/index.js","components/modal/modal.js","components/app/index.js","components/app/app.js","index.js"],"names":["initialState","editableItemId","items","JSON","parse","localStorage","getItem","form","isVisible","newItem","link","comment","preview","preloader","imageModal","gallery","state","action","type","payload","id","itemIdx","findIndex","item","slice","notifications","notification","n","filter","reducer","combineReducers","store","createStore","applyMiddleware","thunk","changeFormVisibility","status","saveNewItem","changePreviewStatus","setItems","setIdForEdit","imageModalToggle","modalParams","showNotify","message","dispatch","notificationId","Date","now","appendNotification","setTimeout","console","log","AppHeader","connect","openForm","className","onClick","Gallery","applyChanges","newState","props","editComment","imgUrl","openPreview","this","length","list","setList","animation","delayOnTouchStart","delay","map","key","deleteItem","src","alt","openModal","title","Component","setItem","stringify","imageLink","AddForm","imageUrl","isButtonDisabled","close","setState","closeForm","addNewImage","e","preventDefault","isNotificationVisible","checkLink","setPreloaderStatus","trim","navigator","onLine","then","res","ok","headers","get","includes","catch","err","prop","currentTarget","getAttribute","value","target","isFormVisible","onSubmit","data","onChange","handleChangeValue","placeholder","cols","rows","disabled","fetch","chechLink","changePreloaderVisibility","Notification","notificationsList","ntf","classList","Preview","acceptEdits","editableId","editItemById","onClose","document","querySelector","focus","completedItem","setNewItem","dataForUpdate","getState","updatedItems","Preloader","Modal","closeModal","clickToOverlay","App","isPreviewVisible","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dfa80778.chunk.js","sourcesContent":["\nconst initialState = {\n  editableItemId: null,\n  items: JSON.parse(localStorage.getItem('items') || '[]'),\n  form: {\n    isVisible: false,\n    newItem: { link: '', comment: '' }\n  },\n  preview: {\n    isVisible: false\n  },\n  preloader: {\n    isVisible: false\n  },\n  imageModal: { link: '', isVisible: false }\n}\n\nconst gallery = (state = initialState, action) => {\n\n  switch (action.type) {\n\n    case 'CHANGE_FORM_VISIBILITY': {\n      return {\n        ...state,\n        form: {\n          ...state.form,\n          isVisible: action.payload\n        }\n      }\n    }\n\n    case 'SAVE_NEW_ITEM': {\n      return {\n          ...state,\n        form: {\n          ...state.form,\n          newItem: action.payload\n        }\n      }\n    }\n\n    case 'CHANGE_PREVIEW_STATUS': {\n      return {\n        ...state,\n        preview: {\n          isVisible: action.payload\n        }\n      }\n    }\n\n    case 'CHANGE_PRELOADER_VISIBILITY': {\n      return {\n        ...state,\n        preloader: {\n          isVisible: action.payload\n        }\n      }\n    }\n\n    case 'SET_ITEMS': {\n      return {\n        ...state,\n        items: action.payload\n      }\n    }\n\n    case 'SET_NEW_ITEM': {\n      return {\n        ...state,\n        items: [\n          action.payload,\n          ...state.items\n        ]\n      }\n    }\n\n    case 'SET_ID_FOR_EDIT': {\n      return {\n        ...state,\n        editableItemId: action.payload\n      }\n    }\n\n    case 'EDIT_ITEM': {\n      const id = action.payload.id\n      const itemIdx = state.items.findIndex(item => item.id === id)\n      const item = state.items[itemIdx]\n      \n      return {\n        ...state,\n        items: [\n          ...state.items.slice(0, itemIdx),\n          { ...item, comment: action.payload.comment },\n          ...state.items.slice(itemIdx + 1)\n        ]\n      }\n    }\n\n    case 'IMAGE_MODAL_TOGGLE': {\n      return {\n        ...state,\n        imageModal: action.payload\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nexport default gallery\n","\nconst initialState = {\n  notifications: []\n}\n\nconst notification = (state = initialState, action) => {\n\n  switch (action.type) {\n\n    case 'APPEND_NOTIFICATION': {\n      return {\n        notifications: [\n          action.payload,\n          ...state.notifications\n        ]\n      }\n    }\n\n    case 'HIDE_NOTIFICATION': {\n      const id = action.payload\n      const itemIdx = state.notifications.findIndex(n => n.id === id)\n      const item = state.notifications[itemIdx]\n\n      return {\n        notifications: [\n          ...state.notifications.slice(0, itemIdx),\n          { ...item, isVisible: false },\n          ...state.notifications.slice(itemIdx + 1)\n        ]\n      }\n    }\n\n    case 'REMOVE_NOTIFICATION': {\n      const id = action.payload\n      return {\n        notifications: state.notifications.filter(n => n.id !== id)\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nexport default notification\n","import { combineReducers } from 'redux'\nimport gallery from './gallery'\nimport notification from './notification'\n\nconst reducer = combineReducers({\n  gallery,\n  notification\n})\n\nexport default reducer\n","import { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducers'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store","import store from '../store';\n\nexport const changeFormVisibility = status => ({\n  type: 'CHANGE_FORM_VISIBILITY',\n  payload: status\n})\n\nexport const chechLink = link => {\n  const proxy = 'https://cors-anywhere.herokuapp.com/'\n  \n  return fetch(proxy + link)\n}\n\nexport const saveNewItem = ({ link, comment }) => ({\n  type: 'SAVE_NEW_ITEM',\n  payload: { link, comment }\n})\n\nexport const changePreviewStatus = status => ({\n  type: 'CHANGE_PREVIEW_STATUS',\n  payload: status\n})\n\nexport const changePreloaderVisibility = status => ({\n  type: 'CHANGE_PRELOADER_VISIBILITY',\n  payload: status\n})\n\nexport const setItems = items => ({\n  type: 'SET_ITEMS',\n  payload: items\n})\n\nexport const setNewItem = item => ({\n  type: 'SET_NEW_ITEM',\n  payload: item\n})\n\nexport const setIdForEdit = id => ({\n  type: 'SET_ID_FOR_EDIT',\n  payload: id\n})\n\nexport const appendNotification = notification => ({\n  type: 'APPEND_NOTIFICATION',\n  payload: notification\n})\n\nexport const hideNotification = id => {\n  console.log(id)\n  return {\n    type: 'HIDE_NOTIFICATION',\n    payload: id\n  }\n}\n\nexport const removeNotification = id => ({\n  type: 'REMOVE_NOTIFICATION',\n  payload: id\n})\n\nexport const imageModalToggle = modalParams => ({\n  type: 'IMAGE_MODAL_TOGGLE',\n  payload: modalParams\n})\n\n// ----------- thunk`s\n\nexport const showNotify = message => dispatch => {\n  const notificationId = Date.now()\n  const notification = { id: notificationId, message, isVisible: true }\n\n  dispatch(appendNotification(notification))\n  setTimeout(() => dispatch(hideNotification(notificationId)), 4000)\n  setTimeout(() => dispatch(removeNotification(notificationId)), 5000)\n}\n\nexport const applyChanges = items => dispatch => {\n  localStorage.setItem('items', JSON.stringify(items))\n  dispatch(setItems(items))\n}\n\nexport const acceptEdits = item => dispatch => {\n  const items = JSON.parse(localStorage.getItem('items') || '[]')\n  const completedItem = { id: Date.now(), ...item }\n\n  localStorage.setItem('items', JSON.stringify([completedItem, ...items]))\n  dispatch(setNewItem(completedItem))\n}\n\nexport const deleteItem = id => dispatch => {\n  let items = JSON.parse(localStorage.getItem('items') || '[]')\n  items = items.filter(item => item.id !== id)\n\n  localStorage.setItem('items', JSON.stringify(items))\n  dispatch(setItems(items))\n}\n\nexport const editItemById = dataForUpdate => dispatch => {\n  // долго пытался вытащить getState из thunk\n  const { gallery: { items }} = store.getState()\n  const id = dataForUpdate.id\n  const itemIdx = items.findIndex(item => item.id === id)\n  const item = items[itemIdx]\n  const updatedItems = [\n    ...items.slice(0, itemIdx),\n    { ...item, comment: dataForUpdate.comment },\n    ...items.slice(itemIdx + 1)\n  ]\n\n  localStorage.setItem('items', JSON.stringify(updatedItems))\n  dispatch(setItems(updatedItems))\n}","import AppHeader from './app-header'\n\nexport default AppHeader","import React from 'react'\nimport { connect } from 'react-redux'\nimport { changeFormVisibility } from '../../actions'\n\nimport './app-header.css'\n\nconst AppHeader = ({ openForm }) => {\n\n  return (\n    <header className=\"header\">\n      <div className=\"header__logo\">\n        Sky Gallery\n      </div>\n      <button className=\"header__add-new\" onClick={ openForm }>\n        <i className=\"material-icons\">add</i>\n        <span>Add New</span>\n      </button>\n    </header>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  openForm: () => dispatch(changeFormVisibility(true))\n})\n\nexport default connect(null, mapDispatchToProps)(AppHeader)","import React, { Component } from 'react'\nimport { ReactSortable } from 'react-sortablejs'\nimport { connect } from 'react-redux'\nimport {\n  applyChanges,\n  deleteItem,\n  saveNewItem,\n  setIdForEdit,\n  changePreviewStatus,\n  imageModalToggle\n} from '../../actions'\n\nimport './gallery.css'\n\nexport class Gallery extends Component {\n\n  applyChanges = newState => this.props.applyChanges(newState)\n\n  editComment = item => {\n    this.props.setIdForEdit(item.id)\n    this.props.saveNewItem({ link: item.imgUrl, comment: item.comment })\n    this.props.openPreview()\n  }\n\n  render() {\n    return this.props.items.length ? (\n      <ReactSortable\n        className=\"gallery\"\n        list={ this.props.items }\n        setList={ this.applyChanges }\n        animation={500}\n        delayOnTouchStart={true}\n        delay={2}\n      >\n        { this.props.items.map(item => (\n          <div className=\"g-item\" key={ item.id }>\n            <div className=\"g-item__image-wrapper\">\n              <i\n                className=\"g-item__delete material-icons\"\n                onClick={ () => this.props.deleteItem(item.id) }\n              >\n                close\n              </i>\n              <img\n                className=\"g-item__image\" src={ item.imgUrl } alt=\"\"\n                onClick={ () => this.props.openModal(item.imgUrl)}\n              />\n            </div>\n            <div className=\"g-item__comment\">\n              <div className=\"g-item__comment-edit\">\n                <span>Comment:</span>\n                <i\n                  className=\"material-icons g-item__edit\"\n                  title=\"Edit comment\"\n                  onClick={ () => this.editComment(item) }\n                > \n                  edit\n                </i>\n              </div>\n              <p className=\"g-item__comment-text\">\n                { item.comment.length ? item.comment : 'no comments yet' }\n              </p>\n            </div>\n          </div>\n        ))}\n      </ReactSortable>\n    ) : (\n      <div className=\"gallery_no-photos\">\n        You have no photos yet. To add, click on the button in the upper right.\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ gallery: { items }}) => ({\n  items\n})\n\nconst mapDispatchToProps = dispatch => ({\n  applyChanges: items => applyChanges(items)(dispatch),\n  deleteItem: id => deleteItem(id)(dispatch),\n  saveNewItem: item => dispatch(saveNewItem(item)),\n  setIdForEdit: id => dispatch(setIdForEdit(id)),\n  openPreview: () => dispatch(changePreviewStatus(true)),\n  openModal: imageLink => dispatch(imageModalToggle({\n    link: imageLink,\n    isVisible: true\n  }))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery)\n","import Gallery from './gallery'\n\nexport default Gallery","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  changeFormVisibility,\n  showNotify,\n  chechLink,\n  saveNewItem,\n  changePreviewStatus,\n  changePreloaderVisibility\n} from '../../actions'\n\nimport './add-form.css'\n\nexport class AddForm extends Component {\n\n  state = {\n    imageUrl: '',\n    comment: '',\n    isButtonDisabled: false\n  }\n\n  close = () => {\n    this.setState(() => ({\n      imageUrl: '',\n      comment: ''\n    }))\n\n    this.props.closeForm()\n  }\n\n  addNewImage = e => {\n    e.preventDefault()\n    this.setState(() => ({ isButtonDisabled: true }))\n\n    const { imageUrl, comment } = this.state\n    const { isNotificationVisible, checkLink,\n            saveNewItem, setPreloaderStatus } = this.props\n\n    if ((!imageUrl || !imageUrl.trim()) && !isNotificationVisible) {\n      this.props.showNotify('Введите ссылку')\n      this.setState(() => ({ isButtonDisabled: false }))\n      return\n    }\n    \n    if (navigator.onLine) {\n      setPreloaderStatus(true)\n      checkLink(imageUrl)\n        .then(res => {\n          if (!res.ok) {\n            this.props.showNotify('Ссылка битая')\n            this.setState(() => ({ isButtonDisabled: false }))\n            setPreloaderStatus(false)\n            return\n          }\n\n          if (res.headers.get('Content-Type').includes('image')) {\n            saveNewItem({\n              link: imageUrl,\n              comment: comment.trim()\n            })\n\n            this.props.closeForm()\n            this.props.openPreview()\n  \n            this.setState(() => ({\n              imageUrl: '',\n              comment: '',\n              isButtonDisabled: false\n            }))\n          } else {\n            this.props.showNotify('Ссылка не на картинку')\n            this.setState(() => ({ isButtonDisabled: false }))\n          }\n          setPreloaderStatus(false)\n        })\n        .catch(err => {\n          this.props.showNotify('Ссылка битая')\n          this.setState(() => ({ isButtonDisabled: false }))\n          setPreloaderStatus(false)\n        })\n    } else {\n      this.props.showNotify('Нет соединения')\n      this.setState(() => ({ isButtonDisabled: false }))\n    }\n    this.setState(() => ({ isButtonDisabled: false }))\n  }\n\n  handleChangeValue(e) {\n    const prop = e.currentTarget.getAttribute('data')\n    const value = e.target.value\n\n    this.setState(() => ({\n      [prop]: value\n    }))\n  }\n\n  render() {\n    return this.props.isFormVisible ? (\n      <div className=\"add-form__overlay\">\n        <form className=\"add-form__form\" onSubmit={ this.addNewImage }>\n          <i\n            className=\"material-icons add-form__close\"\n            onClick={ this.close }\n          >\n            close\n          </i>\n          <p className=\"add-form__heading\">Add new picture</p>\n          <div className=\"add-form__input-wrapper\">\n            <p className=\"add-form__explanation\">Link:</p>\n            <input\n              data=\"imageUrl\"\n              className=\"add-form__link\"\n              type=\"text\"\n              value={ this.state.imageUrl }\n              onChange={ e => this.handleChangeValue(e) }\n              placeholder=\"Enter image link\"\n            />\n          </div>\n          <div className=\"add-form__input-wrapper\">\n            <p className=\"add-form__explanation\">Comment:</p>\n            <textarea\n              data=\"comment\"\n              className=\"add-form__comment\"\n              cols=\"30\"\n              rows=\"3\"\n              value={ this.state.comment }\n              onChange={ e => this.handleChangeValue(e) }\n              placeholder=\"Enter comment (optional)\"\n            />\n          </div>\n          <button\n            className=\"add-form__add-new\"\n            disabled={ this.state.isButtonDisabled }\n            onClick={ this.addNewImage }\n          >\n            Next\n          </button>\n        </form>\n      </div>\n    ) : null\n  }\n}\n\nconst mapStateToProps = ({ gallery, notification }) => ({\n  isFormVisible: gallery.form.isVisible,\n  isNotificationVisible: notification.isVisible\n})\n\nconst mapDispatchToProps = dispatch => ({\n  closeForm: () => dispatch(changeFormVisibility(false)),\n  showNotify: message => showNotify(message)(dispatch),\n  checkLink: link => chechLink(link),\n  saveNewItem: item => dispatch(saveNewItem(item)),\n  openPreview: () => dispatch(changePreviewStatus(true)),\n  setPreloaderStatus: status => dispatch(changePreloaderVisibility(status))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm)","import AddForm from './add-form'\n\nexport default AddForm","import Notification from './notification'\n\nexport default Notification","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport './notification.css'\n\nexport const Notification = ({ notifications }) => {\n\n  const notificationsList = notifications.length ?\n    notifications.map(ntf => {\n      let classList = ntf.isVisible ?\n                      'notification notification_active' :\n                      'notification'\n      return (\n        <li className={ classList } key={ ntf.id }>\n          { ntf.message }\n        </li>\n      )\n    }) : null\n\n  return (\n    <>\n      <ul className=\"notifications\">\n        { notificationsList }\n      </ul>\n    </>\n  )\n}\n\nconst mapStateToProps = ({ notification: { notifications }}) => ({\n  notifications\n})\n\nexport default connect(mapStateToProps)(Notification)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  changePreviewStatus,\n  acceptEdits,\n  saveNewItem,\n  setIdForEdit,\n  editItemById\n} from '../../actions'\n\nimport './preview.css'\n\nexport class Preview extends Component{\n\n  state = {\n    comment: ''\n  }\n\n  componentDidMount() {\n    document.querySelector('.preview__comment-edit').focus()\n\n    this.setState(() => ({\n      comment: this.props.item.comment\n    }))\n  }\n\n  onChange = e => {\n    const value = e.target.value\n    \n    this.setState(() => ({\n      comment: value\n    }))\n  }\n  \n  acceptEdits = () => {\n    const link = this.props.item.link\n    const comment = this.state.comment\n\n    if (this.props.editableId) {\n      this.props.editItemById({\n        id: this.props.editableId,\n        comment: this.state.comment.trim()\n      })\n    } else {\n      this.props.acceptEdits({\n        imgUrl: link,\n        comment: comment.trim()\n      })\n    }\n\n    this.onClose()\n  }\n\n  onClose = () => {\n    this.props.saveNewItem({})\n    this.props.setIdForEdit()\n    this.props.onClose()\n  }\n\n  render() {\n    const { item } = this.props\n\n    return (\n      <div className=\"preview\">\n        <div className=\"preview__box\">\n          <i\n            className=\"material-icons preview__close\"\n            onClick={ this.onClose }\n          >\n            close\n          </i>\n          <p className=\"preview__heading\">Preview</p>\n          <div className=\"preview__data-wrapper\">\n            <div className=\"preview__image-wrapper\">\n              <img src={ item.link } alt=\"\" className=\"preview__image\"/>\n            </div>\n            <div className=\"preview__comment-section\">\n              <p className=\"preview__comment-heading\">Can edit</p>\n              <textarea\n                className=\"preview__comment-edit\"\n                value={ this.state.comment }\n                onChange={ this.onChange }\n              />\n            </div>\n          </div>\n          <button\n            className=\"preview__accept\"\n            onClick={ this.acceptEdits }\n          >\n            I agree\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ gallery }) => ({\n  isVisible: gallery.preview.isVisible,\n  item: gallery.form.newItem,\n  editableId: gallery.editableItemId\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onClose: () => dispatch(changePreviewStatus(false)),\n  acceptEdits: item => acceptEdits(item)(dispatch),\n  saveNewItem: item => dispatch(saveNewItem(item)),\n  setIdForEdit: () => dispatch(setIdForEdit(null)),\n  editItemById: data => editItemById(data)(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Preview)\n","import Preview from './preview'\n\nexport default Preview","import Preloader from './preloader'\n\nexport default Preloader","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport './preloader.css'\n\nconst Preloader = ({ isVisible }) => {\n\n  return isVisible ? (\n    <div className=\"preloader\">\n      <div className=\"lds-ripple\">\n        <div/>\n        <div/>\n      </div>\n    </div>\n  ) : null\n}\n\nconst mapStateToProps = ({ gallery: { preloader }}) => ({\n  isVisible: preloader.isVisible\n})\n\nexport default connect(mapStateToProps)(Preloader)","import Modal from './modal'\n\nexport default Modal","import React from 'react'\nimport { connect } from 'react-redux'\nimport { imageModalToggle } from '../../actions'\n\nimport './modal.css'\n\nexport const Modal = ({ imageModal, closeModal }) => {\n\n  const clickToOverlay = e => {\n    if (e.target.className === 'image-modal') closeModal()\n  }\n\n  return imageModal.isVisible ? (\n    <div className=\"image-modal\" onClick={ e => clickToOverlay(e) }>\n      <div className=\"image-modal__wrapper\">\n        <div className=\"image-modal__close\">\n          <i\n            className=\"material-icons image-modal__close-button\"\n            onClick={ () => closeModal() }\n          >\n            close\n          </i>\n        </div>\n        <div className=\"image-modal__image-wrapper\">\n          <img src={ imageModal.link } alt=\"\" />\n        </div>\n      </div>\n    </div>\n  ) : null\n}\n\nconst mapStateToProps = ({ gallery: { imageModal }}) => ({\n  imageModal\n})\n\nconst mapDispatchToProps = dispatch => ({\n  closeModal: () => dispatch(imageModalToggle({\n    link: '',\n    isVisible: false\n  }))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal)","import App from './app'\n\nexport default App","import React from 'react'\nimport AppHeader from '../app-header'\nimport Gallery from '../gallery'\nimport AddForm from '../add-form'\nimport Notification from '../notification'\nimport Preview from '../preview'\nimport Preloader from '../preloader'\nimport Modal from '../modal'\nimport { connect } from 'react-redux'\n\nimport './app.css'\n\nconst App = ({ isPreviewVisible }) => {\n\n  return (\n    <>\n      <AppHeader />\n      <div className=\"container\">\n        <Gallery />\n      </div>\n      <AddForm />\n      <Notification />\n      { isPreviewVisible ? <Preview /> : null }\n      <Preloader />\n      <Modal />\n    </>\n  )\n}\n\nconst mapStateToProps = ({ gallery }) => ({\n  isPreviewVisible: gallery.preview.isVisible\n})\n\nexport default connect(mapStateToProps)(App)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport './index.css'\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}